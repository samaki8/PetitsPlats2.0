// scripts\models\filtres.js
/*
import { recipes } from '/data/recipes.js';
import { createRecipeCard } from '../models/RecipeCard.js';

export function populateFilters() {
    const ingredientsList = document.getElementById('ingredients-list');
    const appliancesList = document.getElementById('appareil-list');
    const utensilsList = document.getElementById('ustensiles-list');
    const tagsContainer = document.getElementById('tags-container');
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');

    const ingredients = new Set();
    const appliances = new Set();
    const utensils = new Set();

    recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
        appliances.add(recipe.appliance);
        recipe.ustensils.forEach(ust => utensils.add(ust));
    });

    function createListItem(text, tag) {
        const li = document.createElement('li');
        li.className = 'dropdown-item';
        li.textContent = text;
        li.addEventListener('click', () => {
            addTag(text, tag);
            filterRecipesByTag();
        });
        return li;
    }

    function addTag(text, tag) {
        const badge = document.createElement('span');
        badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
        badge.textContent = `${text}`; // Modification ici pour ne garder que le texte
        badge.style = "width: 188px; height: 53px;";

        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.innerHTML = '×'; // Ajoute le "x" au bouton
        closeBtn.style = "font-size: 1.5rem; line-height: 1;"; // Style pour le "x"
        closeBtn.addEventListener('click', () => {
            badge.remove();
            filterRecipesByTag();
        });

        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }
        */
// scripts\models\filtres.js
import { recipes } from '/data/recipes.js';
import { createRecipeCard } from '../models/RecipeCard.js';

export function populateFilters() {
    const ingredientsList = document.getElementById('ingredients-list');
    const appliancesList = document.getElementById('appareil-list');
    const utensilsList = document.getElementById('ustensiles-list');
    const tagsContainer = document.getElementById('tags-container');
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');

    const ingredients = new Set();
    const appliances = new Set();
    const utensils = new Set();

    recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
        appliances.add(recipe.appliance);
        recipe.ustensils.forEach(ust => utensils.add(ust));
    });

    function createListItem(text, tag) {
        const li = document.createElement('li');
        li.className = 'dropdown-item';
        li.textContent = text;
        li.addEventListener('click', () => {
            addTag(text, tag);
            filterRecipesByTag();
        });
        return li;
    }

    function addTag(text, tag) {
        const badge = document.createElement('span');
        badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
        badge.textContent = `${text}`; // Modification ici pour ne garder que le texte
        badge.style = "width: 188px; height: 53px;";

        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.innerHTML = '×'; // Ajoute le "x" au bouton
        closeBtn.style = "font-size: 1.5rem; line-height: 1;"; // Style pour le "x"
        closeBtn.addEventListener('click', () => {
            badge.remove();
            filterRecipesByTag();
        });

        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }
    function filterRecipesByTag() {
        const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => badge.textContent.trim());
        console.log('Tags:', tags);

        let filteredRecipes = recipes;

        tags.forEach(text => {
            filteredRecipes = filteredRecipes.filter(recipe =>
                recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase())) ||
                recipe.appliance.toLowerCase().includes(text.toLowerCase()) ||
                recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))
            );
        });

        console.log('Filtered Recipes:', filteredRecipes);
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
    }


    ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
    appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
    utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

    function filterList(input, list) {
        const filter = input.value.toLowerCase();
        const items = list.getElementsByTagName('li');
        Array.from(items).forEach(item => {
            if (item.textContent.toLowerCase().includes(filter)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    const ingredientInput = document.getElementById('ingredients-search');
    const applianceInput = document.getElementById('appareil-search');
    const utensilInput = document.getElementById('ustensiles-search');

    ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
    applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
    utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));

}

/*
function filterRecipesByTag() {
    const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => badge.textContent.trim());
    console.log('Tags:', tags);
 
    let filteredRecipes = recipes;
 
    tags.forEach(text => {
        filteredRecipes = filteredRecipes.filter(recipe =>
            recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase())) ||
            recipe.appliance.toLowerCase().includes(text.toLowerCase()) ||
            recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))
        );
    });
 
    console.log('Filtered Recipes:', filteredRecipes);
    recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
    nbCard.textContent = `${filteredRecipes.length} Recettes`;
}
*/

ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

function filterList(input, list) {
    const filter = input.value.toLowerCase();
    const items = list.getElementsByTagName('li');
    Array.from(items).forEach(item => {
        if (item.textContent.toLowerCase().includes(filter)) {
            item.style.display = '';
        } else {
            item.style.display = 'none';
        }
    });
}

const ingredientInput = document.getElementById('ingredients-search');
const applianceInput = document.getElementById('appareil-search');
const utensilInput = document.getElementById('ustensiles-search');

ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));


/*
import { recipes } from '/data/recipes.js';
import { createRecipeCard } from '../models/RecipeCard.js';

export function populateFilters() {
    const ingredientsList = document.getElementById('ingredients-list');
    const appliancesList = document.getElementById('appareil-list');
    const utensilsList = document.getElementById('ustensiles-list');
    const tagsContainer = document.getElementById('tags-container');
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');

    const ingredients = new Set();
    const appliances = new Set();
    const utensils = new Set();

    recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
        appliances.add(recipe.appliance);
        recipe.ustensils.forEach(ust => utensils.add(ust));
    });

    function createListItem(text, tag) {
        const li = document.createElement('li');
        li.className = 'dropdown-item';
        li.textContent = text;
        li.addEventListener('click', () => {
            addTag(text, tag);
            filterRecipesByTag();
        });
        return li;
    }

   /* function addTag(text, tag) {
        const badge = document.createElement('span');
        badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
        badge.textContent = `${text}; ${tag}`;
        badge.style = "width: 188px; height: 53px;";
        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.addEventListener('click', () => {
            badge.remove();
            filterRecipesByTag();
        });
        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }*/
/*function addTag(text, tag) {
    const badge = document.createElement('span');
    badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
    badge.textContent = `${text}; ${tag}`;
    badge.style = "width: 188px; height: 53px;";
 
    const closeBtn = document.createElement('button');
    closeBtn.className = 'btn-close ms-2';
    closeBtn.innerHTML = '&times;'; // Ajoute le "x" au bouton
    closeBtn.style = "font-size: 1.5rem; line-height: 1;"; // Style pour le "x"
    closeBtn.addEventListener('click', () => {
        badge.remove();
        filterRecipesByTag();
    });
 
    badge.appendChild(closeBtn);
    tagsContainer.appendChild(badge);
} */
/*
  function addTag(text, tag) {
const badge = document.createElement('span');
badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
badge.textContent = `${text}`; // Modification ici pour ne garder que le texte
badge.style = "width: 188px; height: 53px;";

const closeBtn = document.createElement('button');
closeBtn.className = 'btn-close ms-2';
closeBtn.innerHTML = '×'; // Ajoute le "x" au bouton
closeBtn.style = "font-size: 1.5rem; line-height: 1;"; // Style pour le "x"
closeBtn.addEventListener('click', () => {
badge.remove();
filterRecipesByTag();
});

badge.appendChild(closeBtn);
tagsContainer.appendChild(badge);
}


function filterRecipesByTag() {
const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => {
  const [text, tag] = badge.textContent.split('; ');
  return { text: text.trim(), tag: tag ? tag.replace(')', '').trim() : '' };
});

let filteredRecipes = recipes;

tags.forEach(({ text, tag }) => {
  if (tag === 'ingredient') {
      filteredRecipes = filteredRecipes.filter(recipe =>
          recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase()))
      );
  } else if (tag === 'appliance') {
      filteredRecipes = filteredRecipes.filter(recipe =>
          recipe.appliance.toLowerCase().includes(text.toLowerCase())
      );
  } else if (tag === 'utensil') {
      filteredRecipes = filteredRecipes.filter(recipe =>
          recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))
      );
  }
});

recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
nbCard.textContent = `${filteredRecipes.length} Recettes`;
}

ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

function filterList(input, list) {
const filter = input.value.toLowerCase();
const items = list.getElementsByTagName('li');
Array.from(items).forEach(item => {
  if (item.textContent.toLowerCase().includes(filter)) {
      item.style.display = '';
  } else {
      item.style.display = 'none';
  }
});
}

const ingredientInput = document.getElementById('ingredients-search');
const applianceInput = document.getElementById('appareil-search');
const utensilInput = document.getElementById('ustensiles-search');

ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));
}


/*
import { recipes } from '/data/recipes.js';
import { createRecipeCard } from '../models/RecipeCard.js';import { createRecipeCard } from '../models/RecipeCard.js';
export function populateFilters() {
const ingredientsList = document.getElementById('ingredients-list');
const appliancesList = document.getElementById('appareil-list');
const utensilsList = document.getElementById('ustensiles-list');
const tagsContainer = document.getElementById('tags-container');

const ingredients = new Set();
const appliances = new Set();
const utensils = new Set();

recipes.forEach(recipe => {
recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
appliances.add(recipe.appliance);
recipe.ustensils.forEach(ust => utensils.add(ust));
});

function createListItem(text, tag) {
const li = document.createElement('li');
li.className = 'dropdown-item';
li.textContent = text;
li.addEventListener('click', () => {
  addTag(text, tag);
});
return li;
}

function addTag(text, tag) {
const badge = document.createElement('span');
badge.className = 'badge bg-primary text-white m-1';
badge.textContent = `${text} (${tag})`;
const closeBtn = document.createElement('button');
closeBtn.className = 'btn-close ms-2';
closeBtn.addEventListener('click', () => {
  badge.remove();
  // Optionnel : mettre à jour les recettes filtrées ici
});
badge.appendChild(closeBtn);
tagsContainer.appendChild(badge);
}

ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

function filterList(input, list) {
const filter = input.value.toLowerCase();
const items = list.getElementsByTagName('li');
Array.from(items).forEach(item => {
  if (item.textContent.toLowerCase().includes(filter)) {
      item.style.display = '';
  } else {
      item.style.display = 'none';
  }
});
}

const ingredientInput = document.getElementById('ingredients-search');
const applianceInput = document.getElementById('appareil-search');
const utensilInput = document.getElementById('ustensiles-search');

ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));
}
*/

/*
import { recipes } from '/data/recipes.js';

export function populateFilters() {
    const ingredientsList = document.getElementById('ingredients-list');
    const appliancesList = document.getElementById('appareil-list');
    const utensilsList = document.getElementById('ustensiles-list');
    const tagsContainer = document.getElementById('tags-container');

    const ingredients = new Set();
    const appliances = new Set();
    const utensils = new Set();

    recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
        appliances.add(recipe.appliance);
        recipe.ustensils.forEach(ust => utensils.add(ust));
    });

    function createListItem(text, tag) {
        const li = document.createElement('li');
        li.className = 'dropdown-item';
        li.textContent = text;
        li.addEventListener('click', () => {
            addTag(text, tag);
        });
        return li;
    }

    function addTag(text, tag) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-warning text-white m-1';
        badge.textContent = `${text} (${tag})`;
        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.addEventListener('click', () => {
            badge.remove();
            // Optionnel : mettre à jour les recettes filtrées ici
        });
        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }

    ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
    appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
    utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

    function filterList(input, list) {
        const filter = input.value.toLowerCase();
        const items = list.getElementsByTagName('li');
        Array.from(items).forEach(item => {
            if (item.textContent.toLowerCase().includes(filter)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    const ingredientInput = document.getElementById('ingredients-search');
    const applianceInput = document.getElementById('appareil-search');
    const utensilInput = document.getElementById('ustensiles-search');

    ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
    applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
    utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));
}

}
*/

index.js


/*
import { fetchRecipes } from '../api/api.js';
import { createRecipeCard } from '../models/RecipeCard.js';
import { populateFilters } from '../models/filtres.js';
import { filterByMainSearch } from '../models/search.js';

document.addEventListener('DOMContentLoaded', async () => {
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');
    const errorMessage = document.getElementById('error-message');
    const tagsContainer = document.getElementById('tags-container');
    const recipes = await fetchRecipes();
    let filteredRecipes = recipes;

    const updateRecipeCards = () => {
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
    };

    updateRecipeCards();
    populateFilters(recipes);

    function addTag(text, type) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary text-white m-1';
        badge.textContent = `${text} (${type})`;
        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.addEventListener('click', () => {
            badge.remove();
            // Optionnel : mettre à jour les recettes filtrées ici
        });
        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }

    // Event listeners for search
    document.getElementById('main-search').addEventListener('input', (e) => {
        filteredRecipes = filterByMainSearch(e.target.value, recipes);
        updateRecipeCards();
    });

    document.getElementById('dropdownMenuButton1').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'ingredient', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'ingredient');
    });

    document.getElementById('dropdownMenuButton2').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'ustensil', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'ustensil');
    });

    document.getElementById('dropdownMenuButton3').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'appliance', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'appliance');
    });
});

/*
import { fetchRecipes } from '../api/api.js';
import { createRecipeCard } from '../models/RecipeCard.js';
import { populateFilters } from '../models/filtres.js';
document.addEventListener('DOMContentLoaded', async () => {
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');
    const errorMessage = document.getElementById('error-message');
    const recipes = await fetchRecipes();
    let filteredRecipes = recipes;

    const updateRecipeCards = () => {
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
    };

    const filterRecipes = (searchTerm, type) => {
        console.log(`Filtering by ${type} with term: ${searchTerm}`);
        if (searchTerm.length < 3) {
            filteredRecipes = recipes;
        } else {
            filteredRecipes = filteredRecipes.filter(recipe => {
                if (type === 'ingredient') {
                    return recipe.ingredients.some(ing => ing.ingredient.toLowerCase().includes(searchTerm.toLowerCase()));
                } else if (type === 'appliance') {
                    return recipe.appliance.toLowerCase().includes(searchTerm.toLowerCase());
                } else if (type === 'utensil') {
                    return recipe.ustensils.some(ust => ust.toLowerCase().includes(searchTerm.toLowerCase()));
                }
                return false;
            });

            updateRecipeCards();
            populateFilters(recipes);
            updateFilters(filteredRecipes);
        };

        const filterByMainSearch = (query) => {
            console.log(`Main search with query: ${query}`);
            filteredRecipes = recipes.filter(recipe =>
                recipe.name.toLowerCase().includes(query) ||
                recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(query))
            );
            if (filteredRecipes.length === 0) {
                errorMessage.textContent = `Aucune recette trouvée pour "${query}"`;
                errorMessage.style.display = 'block';
            } else {
                errorMessage.style.display = 'none';
            }
            updateRecipeCards();
            updateFilters(filteredRecipes);
        };

        const updateFilters = (filteredRecipes) => {
            const ingredientsList = document.getElementById('ingredients-list');
            const appliancesList = document.getElementById('appareil-list');
            const utensilsList = document.getElementById('ustensiles-list');

            const ingredients = new Set();
            const appliances = new Set();
            const utensils = new Set();

            filteredRecipes.forEach(recipe => {
                recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
                appliances.add(recipe.appareil);
                recipe.ustensils.forEach(ust => utensils.add(ust));
            });

            ingredientsList.innerHTML = '';
            appliancesList.innerHTML = '';
            utensilsList.innerHTML = '';

            ingredients.forEach(ing => {
                const li = document.createElement('li');
                li.className = 'dropdown-item';
                li.textContent = ing;
                ingredientsList.appendChild(li);
            });

            appliances.forEach(app => {
                const li = document.createElement('li');
                li.className = 'dropdown-item';
                li.textContent = app;
                appliancesList.appendChild(li);
            });

            utensils.forEach(ust => {
                const li = document.createElement('li');
                li.className = 'dropdown-item';
                li.textContent = ust;
                utensilsList.appendChild(li);
            });
        };

        const mainSearchInput = document.getElementById('inputGroup-sizing-lg');
        if (mainSearchInput) {
            mainSearchInput.addEventListener('input', (e) => {
                const query = e.target.value.toLowerCase();
                filterByMainSearch(query);
            });
        }

        const ingredientSearchInput = document.getElementById('ingredients-search');
        if (ingredientSearchInput) {
            ingredientSearchInput.addEventListener('input', (e) => {
                filterRecipes(e.target.value, 'ingredient');
            });
        }

        const applianceSearchInput = document.getElementById('appareil-search');
        if (applianceSearchInput) {
            applianceSearchInput.addEventListener('input', (e) => {
                filterRecipes(e.target.value, 'appliance');
            });
        }

        const utensilSearchInput = document.getElementById('ustensiles-search');
        if (utensilSearchInput) {
            utensilSearchInput.addEventListener('input', (e) => {
                filterRecipes(e.target.value, 'utensil');
            });
        }

        // Afficher toutes les cartes de recettes au lancement du site
        updateRecipeCards();
        // Afficher les listes d'ingrédients, d'ustensiles et d'appareils avant tout filtrage
        updateFilters(recipes);
    }
*/
// scripts/index.js


/*
import { fetchRecipes } from '../api/api.js';
import { createRecipeCard } from '../models/RecipeCard.js';
import { populateFilters } from '../models/filtres.js';
import { filterByMainSearch,} from '../models/search.js';

document.addEventListener('DOMContentLoaded', async () => {
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');
    const errorMessage = document.getElementById('error-message');
    const tagsContainer = document.getElementById('tags-container');
    const recipes = await fetchRecipes();
    let filteredRecipes = recipes;
    const updateRecipeCards = () => {
        filteredRecipes = filterByMainSearch(document.getElementById('main-search').value, recipes);
    };

    document.getElementById('main-search').addEventListener('input', (e) => {
        updateRecipeCards();
    });

    // Initial call to populate the cards
    updateRecipeCards();
   /*
    const updateRecipeCards = () => {
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
        
    };

    updateRecipeCards();
    populateFilters(recipes);
    */
/*
    function addTag(text, type) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-primary text-white m-1';
        badge.textContent = `${text} (${type})`;
        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.addEventListener('click', () => {
            badge.remove();
            // Optionnel : mettre à jour les recettes filtrées ici
        });
        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }

    // Event listeners for search
    document.getElementById('main-search').addEventListener('input', (e) => {
        filteredRecipes = filterByMainSearch(e.target.value, recipes);
        updateRecipeCards();
        addTag(e.target.value);
    
    });

    document.getElementById('dropdownMenuButton1').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'ingredient', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'ingredient');
    });

    document.getElementById('dropdownMenuButton2').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'ustensil', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'ustensil');
    });

    document.getElementById('dropdownMenuButton3').addEventListener('input', (e) => {
        filteredRecipes = filterRecipes(e.target.value, 'appliance', recipes);
        updateRecipeCards();
        addTag(e.target.value, 'appliance');
    });
});
*/



    /*
    function filterRecipesByTag() {
        const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => badge.textContent.trim());
        console.log('Tags:', tags);
    
        let filteredRecipes = recipes;
        
        tags.forEach(text => {
            filteredRecipes = filteredRecipes.filter(recipe => {
                if (recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase()))) {
                    return true;
                } else if (recipe.appliance.toLowerCase().includes(text.toLowerCase())) {
                    return true;
                } else if (recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))) {
                    return true;
                } else {
                    return false;
                }
            });
        });
    
        console.log('Filtered Recipes:', filteredRecipes);
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
    }
    
    */
    /*
      function filterRecipesByTag() {
          const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => badge.textContent.trim());
          console.log('Tags:', tags);
  
          let filteredRecipes = recipes;
  
          tags.forEach(text => {
              filteredRecipes = filteredRecipes.filter(recipe =>
                  recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase())) ||
                  recipe.appliance.toLowerCase().includes(text.toLowerCase()) ||
                  recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))
              );
          });
  
          console.log('Filtered Recipes:', filteredRecipes);
          recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
          nbCard.textContent = `${filteredRecipes.length} Recettes`;
          
  
          
      }*/

    /*
   function filterRecipesByTag()
   
   let filteredRecipes = recipes;

   const updateRecipeCards = () => {
   recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
   nbCard.textContent = `${filteredRecipes.length} Recettes`;
    };

    const filterRecipes = (searchTerm, type) => {
   if (searchTerm.length < 3) {
       filteredRecipes = recipes;
   } else {
       filteredRecipes = recipes.filter(recipe => {
           if (type === 'ingredient') {
               return recipe.ingredients.some(ing => ing.ingredient.toLowerCase().includes(searchTerm.toLowerCase()));
           } else if (type === 'appliance') {
               return recipe.appliance.toLowerCase().includes(searchTerm.toLowerCase());
           } else if (type === 'utensil') {
               return recipe.ustensils.some(ust => ust.toLowerCase().includes(searchTerm.toLowerCase()));
           }
           return false;
       });
   }
   updateRecipeCards();
};
  */



/*
import { recipes } from '/data/recipes.js';
import { createRecipeCard } from '../models/RecipeCard.js';

export function populateFilters() {
    const ingredientsList = document.getElementById('ingredients-list');
    const appliancesList = document.getElementById('appareil-list');
    const utensilsList = document.getElementById('ustensiles-list');
    const tagsContainer = document.getElementById('tags-container');
    const recipeCardsContainer = document.getElementById('recipe-cards');
    const nbCard = document.querySelector('.nbcard');

    const ingredients = new Set();
    const appliances = new Set();
    const utensils = new Set();

    recipes.forEach(recipe => {
        recipe.ingredients.forEach(ing => ingredients.add(ing.ingredient));
        appliances.add(recipe.appliance);
        recipe.ustensils.forEach(ust => utensils.add(ust));
    });

    function createListItem(text, tag) {
        const li = document.createElement('li');
        li.className = 'dropdown-item';
        li.textContent = text;
        li.addEventListener('click', () => {
            addTag(text, tag);
            filterRecipesByTag();
        });
        return li;
    }

    function addTag(text, tag) {
        const badge = document.createElement('span');
        badge.className = 'badge d-flex justify-content-between align-items-center text-bg-warning rounded-2';
        badge.textContent = `${text}`; // Modification ici pour ne garder que le texte
        badge.style = "width: 188px; height: 53px;";

        const closeBtn = document.createElement('button');
        closeBtn.className = 'btn-close ms-2';
        closeBtn.innerHTML = '×'; // Ajoute le "x" au bouton
        closeBtn.style = "font-size: 1.5rem; line-height: 1;"; // Style pour le "x"
        closeBtn.addEventListener('click', () => {
            badge.remove();
            filterRecipesByTag();
        });

        badge.appendChild(closeBtn);
        tagsContainer.appendChild(badge);
    }
    function filterRecipesByTag() {
        const tags = Array.from(tagsContainer.getElementsByClassName('badge')).map(badge => badge.textContent.trim());
        console.log('Tags:', tags);

        let filteredRecipes = recipes;

        tags.forEach(text => {
            filteredRecipes = filteredRecipes.filter(recipe =>
                recipe.ingredients.some(ingredient => ingredient.ingredient.toLowerCase().includes(text.toLowerCase())) ||
                recipe.appliance.toLowerCase().includes(text.toLowerCase()) ||
                recipe.ustensils.some(ustensil => ustensil.toLowerCase().includes(text.toLowerCase()))
            );
        });

        console.log('Filtered Recipes:', filteredRecipes);
        recipeCardsContainer.innerHTML = filteredRecipes.map(createRecipeCard).join('');
        nbCard.textContent = `${filteredRecipes.length} Recettes`;
    }


    

    ingredients.forEach(ing => ingredientsList.appendChild(createListItem(ing, 'ingredient')));
    appliances.forEach(app => appliancesList.appendChild(createListItem(app, 'appliance')));
    utensils.forEach(ust => utensilsList.appendChild(createListItem(ust, 'utensil')));

    function filterList(input, list) {
        const filter = input.value.toLowerCase();
        const items = list.getElementsByTagName('li');
        Array.from(items).forEach(item => {
            if (item.textContent.toLowerCase().includes(filter)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    }

    const ingredientInput = document.getElementById('ingredients-search');
    const applianceInput = document.getElementById('appareil-search');
    const utensilInput = document.getElementById('ustensiles-search');

    ingredientInput.addEventListener('input', () => filterList(ingredientInput, ingredientsList));
    applianceInput.addEventListener('input', () => filterList(applianceInput, appliancesList));
    utensilInput.addEventListener('input', () => filterList(utensilInput, utensilsList));

}

*/